name: Docker Publish

on:
  push:
    branches:
      - main

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
          buildkitd-flags: --debug
          config-inline: |
            [registry."docker.io"]
              mirrors = ["mirror.gcr.io"]

      - name: Restore Docker layers cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: kafka-client-build-cache-${{ github.run_id }}
          restore-keys: |
            kafka-client-build-cache-

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Fetch latest state of repository
        run: git fetch --prune --unshallow --tags

      - name: Run build script
        run: bash build.sh

      - name: Save Docker layers cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: kafka-client-build-cache-${{ github.run_id }}

      - name: Logout from DockerHub
        run: docker logout

      - name: Tag successful build
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const buildNumber = process.env.BUILD_NUMBER;
              const tagName = `${buildNumber}`;
              const { owner, repo } = context.repo;
              console.log(`Creating tag: ${tagName}`);  // Debugging

              await github.rest.git.createRef({
                owner,
                repo,
                ref: `refs/tags/${tagName}`,
                sha: context.sha
              });

              console.log(`Tag ${tagName} created successfully`); // Debugging
            } catch (error) {
              core.setFailed(error.message);
            }
          github-token: ${{ secrets.PAT }}